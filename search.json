[
  {
    "objectID": "more_resources.html",
    "href": "more_resources.html",
    "title": "Learn from experts",
    "section": "",
    "text": "https://github.com/ThinkR-open/golem\n\nbinding functionbinding function - source create_golem()Metadata\n\n\n\n\n\ncreate_golem.R\n\n# to be used in RStudio \"new project\" GUI\ncreate_golem_gui <- function(path, ...) {\n    dots <- list(...)\n    attempt::stop_if_not(\n        dots$project_hook,\n        ~ grepl(\"::\", .x),\n        \"{golem} project templates must be explicitely namespaced (pkg::fun)\"\n    )\n    splt <- strsplit(dots$project_hook, \"::\")\n    project_hook <- getFromNamespace(\n        splt[[1]][2],\n        splt[[1]][1]\n    )\n    create_golem(\n        path = path,\n        open = FALSE,\n        without_comments = dots$without_comments,\n        project_hook = project_hook,\n        check_name = dots$check_name,\n        with_git = dots$with_git\n    )\n}\n\n\n\n\n\n\n\ncreate_golem.R\n\ncreate_golem <- function(\n    path,\n    check_name = TRUE,\n    open = TRUE,\n    overwrite = FALSE,\n    package_name = basename(path),\n    without_comments = FALSE,\n    project_hook = golem::project_hook,\n    with_git = FALSE,\n    ...) {\n    path_to_golem <- normalizePath(\n        path,\n        mustWork = FALSE\n    )\n\n    if (check_name) {\n        cli_cat_rule(\"Checking package name\")\n        rlang::check_installed(\n            \"usethis\",\n            version = \"1.6.0\",\n            reason = \"to check the package name.\"\n        )\n        getFromNamespace(\n            \"check_package_name\",\n            \"usethis\"\n        )(package_name)\n        cat_green_tick(\"Valid package name\")\n    }\n\n    if (fs_dir_exists(path_to_golem)) {\n        if (!isTRUE(overwrite)) {\n            stop(\n                paste(\n                    \"Project directory already exists. \\n\",\n                    \"Set `create_golem(overwrite = TRUE)` to overwrite anyway.\\n\",\n                    \"Be careful this will restore a brand new golem. \\n\",\n                    \"You might be at risk of losing your work !\"\n                ),\n                call. = FALSE\n            )\n        } else {\n            cat_red_bullet(\"Overwriting existing project.\")\n        }\n    } else {\n        cli_cat_rule(\"Creating dir\")\n        usethis_create_project(\n            path = path_to_golem,\n            open = FALSE\n        )\n        if (!file.exists(\".here\")) {\n            here::set_here(path_to_golem)\n        }\n        cat_green_tick(\"Created package directory\")\n    }\n\n    cli_cat_rule(\"Copying package skeleton\")\n    from <- golem_sys(\"shinyexample\")\n\n    # Copy over whole directory\n    fs_dir_copy(\n        path = from,\n        new_path = path_to_golem,\n        overwrite = TRUE\n    )\n\n    # Listing copied files ***from source directory***\n    copied_files <- list.files(\n        path = from,\n        full.names = FALSE,\n        all.files = TRUE,\n        recursive = TRUE\n    )\n\n    replace_package_name(\n        copied_files,\n        package_name,\n        path_to_golem\n    )\n\n    cat_green_tick(\"Copied app skeleton\")\n\n    old <- setwd(path_to_golem)\n\n    cli_cat_rule(\"Running project hook function\")\n\n    # TODO fix\n    # for some weird reason test() fails here when using golem::create_golem\n    # and I don't have time to search why rn\n    if (substitute(project_hook) == \"golem::project_hook\") {\n        project_hook <- getFromNamespace(\"project_hook\", \"golem\")\n    }\n    project_hook(\n        path = path_to_golem,\n        package_name = package_name,\n        ...\n    )\n\n    setwd(old)\n\n    cat_green_tick(\"All set\")\n\n    if (isTRUE(without_comments)) {\n        files <- list.files(\n            path = c(\n                file.path(path_to_golem, \"dev\"),\n                file.path(path_to_golem, \"R\")\n            ),\n            full.names = TRUE\n        )\n        for (file in files) {\n            remove_comments(file)\n        }\n    }\n\n    if (isTRUE(with_git)) {\n        cli_cat_rule(\"Initializing git repository\")\n        git_output <- system(\n            command = paste(\"git init\", path_to_golem),\n            ignore.stdout = TRUE,\n            ignore.stderr = TRUE\n        )\n        if (git_output) {\n            cat_red_bullet(\"Error initializing git epository\")\n        } else {\n            cat_green_tick(\"Initialized git repository\")\n        }\n    }\n\n    old <- setwd(path_to_golem)\n\n    if (!requireNamespace(\"desc\", quietly = TRUE)) {\n        check_desc_installed()\n    } # incase of {desc} not installed by {usethis}\n\n    usethis_use_latest_dependencies()\n\n    # No .Rprofile for now\n    # cli_cat_rule(\"Appending .Rprofile\")\n    # write(\"# Sourcing user .Rprofile if it exists \", \".Rprofile\", append = TRUE)\n    # write(\"home_profile <- file.path(\", \".Rprofile\", append = TRUE)\n    # write(\"  Sys.getenv(\\\"HOME\\\"), \", \".Rprofile\", append = TRUE)\n    # write(\"  \\\".Rprofile\\\"\", \".Rprofile\", append = TRUE)\n    # write(\")\", \".Rprofile\", append = TRUE)\n    # write(\"if (file.exists(home_profile)){\", \".Rprofile\", append = TRUE)\n    # write(\"  source(home_profile)\", \".Rprofile\", append = TRUE)\n    # write(\"}\", \".Rprofile\", append = TRUE)\n    # write(\"rm(home_profile)\", \".Rprofile\", append = TRUE)\n    #\n    # write(\"# Setting shiny.autoload.r to FALSE \", \".Rprofile\", append = TRUE)\n    # write(\"options(shiny.autoload.r = FALSE)\", \".Rprofile\", append = TRUE)\n    # cat_green_tick(\"Appended\")\n\n    setwd(old)\n\n    cli_cat_rule(\"Done\")\n\n    cli_cat_line(\n        paste0(\n            \"A new golem named \",\n            package_name,\n            \" was created at \",\n            path_to_golem,\n            \" .\\n\",\n            \"To continue working on your app, start editing the 01_start.R file.\"\n        )\n    )\n\n    check_dev_deps_are_installed()\n\n    if (isTRUE(open)) {\n        if (\n            rlang::is_installed(\"rstudioapi\") &&\n                rstudioapi::isAvailable() &&\n                rstudioapi::hasFun(\"openProject\")\n        ) {\n            rstudioapi::openProject(path = path)\n        } else {\n            setwd(path)\n        }\n    }\n\n    return(\n        invisible(\n            path_to_golem\n        )\n    )\n}\n\n\n\n\n\n\n\ncreate_golem.dcf\n\n\nBinding: create_golem_gui\nTitle: Package for Shiny App using golem\nOpenFiles: dev/01_start.R\nIcon: golem.png\n\nParameter: without_comments\nWidget: CheckboxInput\nLabel: Start my project without golem comments\nDefault: Off\nPosition: left\n\nParameter: project_hook\nWidget: TextInput\nLabel: Hook function to run during project creation\nDefault: golem::project_hook\nPosition: left\n\nParameter: check_name\nWidget: CheckboxInput\nLabel: Perform a Check on the name\nDefault: On\nPosition: left\n\nParameter: with_git\nWidget: CheckboxInput\nLabel: Create a git repository\nDefault: Off\nPosition: left"
  },
  {
    "objectID": "more_resources.html#bookdown",
    "href": "more_resources.html#bookdown",
    "title": "Learn from experts",
    "section": "2 bookdown",
    "text": "2 bookdown\nhttps://github.com/rstudio/bookdown\n\nbinding functionMetadata\n\n\n\n\n\nskeleton.R\n\n# this is the function used for the RStudio project template\n\nbookdown_skeleton <- function(path, output_format = skeleton_formats()) {\n    output_format <- match.arg(output_format)\n    # ensure directory exists\n    dir.create(path, recursive = TRUE, showWarnings = FALSE)\n    path <- xfun::normalize_path(path)\n\n    # Get common resources\n    files <- skeleton_get_files(\"common\")\n    files_format <- skeleton_get_files(output_format)\n    # copy them to path\n    source <- file.path(skeleton_get_dir(), c(files, files_format))\n    # common resource are copied without folder\n    target <- file.path(path, c(xfun::relative_path(files, \"common\"), files_format))\n\n    lapply(unique(dirname(target)), dir_create)\n    file.copy(source, target)\n\n    # Tweak template file\n    skeleton_build_index(path, output_format)\n    skeleton_build_output_yml(path, output_format)\n    skeleton_build_bookdown_yml(path, output_format)\n    move_dir(file.path(path, output_format), path) # move left format files\n    skeleton_remove_blocks(path, output_format)\n\n    # Get missing assets\n    if (output_format == \"bs4_book\") {\n        skeleton_get_csl(path, \"chicago-fullnote-bibliography\")\n    }\n\n    invisible(TRUE)\n}\n\n\n\n\n\n\n\nskeleton.dcf\n\nTitle: Book project using bookdown\nOpenFiles: README.md, index.Rmd, _bookdown.yml, _output.yml\nIcon: book.png\nBinding: bookdown_skeleton\nParameter: output_format\nWidget: SelectInput\nLabel: Select HTML book format\nFields: gitbook, bs4_book\nDefault: gitbook\nPosition: left"
  },
  {
    "objectID": "more_resources.html#blogdown",
    "href": "more_resources.html#blogdown",
    "title": "Learn from experts",
    "section": "3 blogdown",
    "text": "3 blogdown\nhttps://github.com/rstudio/blogdown\n\nbinding functionbinding function - source new_site()Metadata\n\n\n\n\n\npackage.R\n\nblogdown_skeleton <- function(path, ...) {\n    opts <- options(blogdown.open_sample = FALSE)\n    on.exit(options(opts), add = TRUE)\n    new_site(dir = path, ..., serve = FALSE)\n}\n\n\n\n\n\n\n\nhugo.R\n\nnew_site <- function(\n    dir = \".\", force = NA, install_hugo = TRUE, format = \"yaml\", sample = TRUE,\n    theme = \"yihui/hugo-lithium\", hostname = \"github.com\", theme_example = TRUE,\n    empty_dirs = FALSE, to_yaml = TRUE, netlify = TRUE, .Rprofile = TRUE,\n    serve = if (interactive()) \"ask\" else FALSE) {\n    msg_init(\"Creating your new site\")\n    opts$set(site_root = NULL) # invalidate the previously stored site root\n    if (is.na(force)) {\n        files <- grep(\n            \"([.]Rproj|/(LICENSE|README)([.][a-z]+)?)$\", list_files(dir),\n            invert = TRUE, value = TRUE\n        )\n        force <- length(files) == 0\n        if (!force) {\n            force <- yes_no(sprintf(\"The directory '%s' is not empty. Create the site anyway?\", dir))\n            if (!force) {\n                stop(\n                    \"The dir is not empty and Hugo might override existing files. If you are \",\n                    \"sure the site can be created in this dir, use new_site(force = TRUE).\"\n                )\n            }\n        }\n    }\n    if (install_hugo && !hugo_available()) {\n        msg_next(\"Installing Hugo\")\n        install_hugo()\n    }\n    if (is.logical(format)) format <- if (format) \"yaml\" else \"toml\"\n    if (hugo_cmd(\n        c(\"new\", \"site\", shQuote(path.expand(dir)), if (force) \"--force\", \"-f\", format),\n        stdout = FALSE\n    ) != 0) {\n        return(invisible())\n    }\n\n    owd <- setwd(dir)\n    opt <- opts$get()\n    opts$restore()\n    on.exit(\n        {\n            opts$restore(opt)\n            setwd(owd)\n        },\n        add = TRUE\n    )\n\n    # remove Hugo's default archetype (I think draft: true is a confusing default)\n    unlink(file.path(\"archetypes\", \"default.md\"))\n    # remove empty dirs\n    if (!empty_dirs) for (d in list.dirs(recursive = FALSE)) del_empty_dir(d)\n    if (is.character(theme) && length(theme) == 1 && !is.na(theme)) {\n        msg_next(\"Installing the theme \", theme, \" from \", hostname)\n        install_theme(theme, theme_example, hostname = hostname)\n    }\n    # remove the .gitignore that ignores everything under static/:\n    # https://github.com/rstudio/blogdown/issues/320\n    if (file.exists(gitignore <- file.path(\"static\", \".gitignore\"))) {\n        if (any(xfun::read_utf8(gitignore) == \"*\")) unlink(gitignore)\n    }\n\n    if (sample) {\n        lang <- get_lang()\n        d <- file.path(\"content\", c(\"blog\", \"posts\", \"post\"))\n        d <- c(file.path(\"content\", lang, basename(d)), d)\n        for (i in d) if (dir_exists(i)) break\n        d <- i\n        f1 <- pkg_file(\"resources\", \"2020-12-01-r-rmarkdown.Rmd\")\n        if (use_bundle()) d <- file.path(d, basename(xfun::sans_ext(f1)))\n        f2 <- file.path(d, if (use_bundle()) \"index.Rmd\" else basename(f1))\n        # for a multilingual site, create the sample post via new_content() because\n        # the post may need to be under a language dir (#537)\n        if (length(lang)) {\n            f2 <- sub(sprintf(\"^content/(%s/)?\", lang), \"\", f2)\n            f2 <- sub(\"^(.+[.])\", sprintf(\"\\\\1%s.\", lang), f2)\n            f2 <- new_content(f2, open = FALSE)\n            file.remove(f2)\n        } else {\n            dir_create(d)\n        }\n        msg_next(\"Adding the sample post to \", f2)\n        file.copy(f1, f2)\n        if (getOption(\"blogdown.open_sample\", TRUE)) open_file(f2)\n    }\n    if (!file_exists(\"index.Rmd\")) create_index()\n\n    if (to_yaml) {\n        msg_next(\"Converting all metadata to the YAML format\")\n        hugo_convert(\"YAML\", unsafe = TRUE)\n    }\n    # convert config.[toml|yaml] to config.[yaml|toml] if necessary\n    if (length(cfg <- find_config(error = FALSE)) == 1 && file_ext(cfg) != format) {\n        (if (format == \"yaml\") toml2yaml else yaml2toml)(cfg, with_ext(cfg, format))\n        unlink(cfg)\n    }\n    if (netlify) {\n        msg_next(\"Adding netlify.toml in case you want to deploy the site to Netlify\")\n        if (!file.exists(\"netlify.toml\")) {\n            config_netlify(\"netlify.toml\")\n        } else {\n            msg_todo(\n                \"The file 'netlify.toml' exists, and I will not overwrite it. If you want \",\n                \"to overwrite it, you may call blogdown::config_netlify() by yourself.\"\n            )\n        }\n    }\n    if (.Rprofile) {\n        msg_next(\"Adding .Rprofile to set options() for blogdown\")\n        config_Rprofile()\n    }\n    dir_create(\"R\")\n    add_build_script <- function(x, f) {\n        write_utf8(c(\n            sprintf(\"# An optional custom script to run %s Hugo builds your site.\", x),\n            \"# You can delete it if you do not need it.\"\n        ), f)\n    }\n    add_build_script(\"before\", \"R/build.R\")\n    add_build_script(\"after\", \"R/build2.R\")\n    msg_init(\"The new site is ready\")\n    msg_okay(\n        \"To start a local preview: use blogdown::serve_site()\",\n        if (is_rstudio()) ', or the RStudio add-in \"Serve Site\"'\n    )\n    msg_okay(\"To stop a local preview: use blogdown::stop_server(), or restart your R session\")\n    if (identical(serve, \"ask\")) serve <- yes_no(\"Want to serve and preview the site now?\")\n    if (serve) serve_site()\n    if (length(list.files(\".\", \"[.]Rproj$\")) == 0) {\n        xfun::try_silent(rstudioapi::initializeProject())\n    }\n    invisible(getwd())\n}\n\n\n\n\n\n\n\nskeleton.dcf\n\nTitle: Website using blogdown\nBinding: blogdown_skeleton\nSubtitle: Create a new website using Hugo and blogdown\nCaption: Create a new website using Hugo and blogdown\nIcon: hugo-logo.png\n\nParameter: theme\nWidget: TextInput\nLabel: Hugo theme\nDefault: yihui/hugo-lithium\n\nParameter: format\nWidget: CheckboxInput\nLabel: Convert the site config file to YAML\nDefault: On\n\nParameter: to_yaml\nWidget: CheckboxInput\nLabel: Convert all post metadata to YAML\nDefault: On\n\nParameter: sample\nWidget: CheckboxInput\nLabel: Add sample blog posts\nDefault: On\n\nParameter: theme_example\nWidget: CheckboxInput\nLabel: Add the example site from the theme\nDefault: On\n\nParameter: empty_dirs\nWidget: CheckboxInput\nLabel: Keep empty directories\nDefault: Off\nPosition: right\n\nParameter: netlify\nWidget: CheckboxInput\nLabel: Create netlify.toml\nDefault: On\nPosition: right\n\nParameter: .Rprofile\nWidget: CheckboxInput\nLabel: Create .Rprofile\nDefault: On\nPosition: right\n\nParameter: install_hugo\nWidget: CheckboxInput\nLabel: Install Hugo if not installed\nDefault: On\nPosition: right"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "China Pharma RUG Meeting 2023 demo2",
    "section": "",
    "text": "template metadatabinding functionRStuido UItestdemo2\n\n\n\n\n\ncrug_skeleton.dcf\n\nBinding: crug_skeleton\nTitle: China Pharma RUG Demo2\nOpenFiles: dev/01_dev.R, docs/index.qmd\nIcon: demo.png\n\nParameter: with_git\nWidget: CheckboxInput\nLabel: Create a git repository\nDefault: On\nPosition: left\n\nParameter: with_renv\nWidget: CheckboxInput\nLabel: Use renv\nDefault: On\nPosition: left\n\nParameter: python_venv\nWidget: CheckboxInput\nLabel: Python venv\nDefault: On\nPosition: left\n\nParameter: quarto_site\nWidget: CheckboxInput\nLabel: Create Quarto Site\nDefault: On\nPosition: left\n\n\n\n\n\n\n\ncrug_skeleton.R\n\ncrug_skeleton <- function(path, ...) {\n    # ensure path exists\n    dir.create(path, recursive = TRUE, showWarnings = FALSE)\n\n    dev_dir <- fs::path(path, \"dev\")\n    dir.create(dev_dir, recursive = TRUE, showWarnings = FALSE)\n\n    file.copy(\n        from = system.file(\"dev\", \"01_dev.R\", package = \"crugdemo2\", mustWork = TRUE),\n        to = dev_dir,\n        recursive = TRUE\n    )\n\n    dots <- list(...)\n\n    if (dots$quarto_site) {\n        quarto_site <- list.files(\n            system.file(\"quarto_site\", package = \"crugdemo2\", mustWork = TRUE),\n            full.names = TRUE,\n            include.dirs = TRUE,\n            recursive = FALSE\n        )\n\n        docs_dir <- fs::path(path, \"docs\")\n\n        dir.create(docs_dir, recursive = TRUE, showWarnings = FALSE)\n\n        file.copy(\n            from = quarto_site,\n            to = docs_dir,\n            overwrite = TRUE,\n            recursive = TRUE\n        )\n    }\n\n    if (dots$with_git) {\n        cli::cat_rule(\"Initializing git repository\")\n        git_output <- system(\n            command = paste(\"git init\", path),\n            ignore.stdout = TRUE,\n            ignore.stderr = TRUE\n        )\n        if (git_output) {\n            cli::cat_rule(\"Error initializing git epository\")\n        } else {\n            cli::cat_rule(\"Initialized git repository\")\n        }\n    }\n\n    if (dots$python_venv) {\n        python_venv_dir <- fs::path(path, \"pyenv\")\n        reticulate::virtualenv_create(python_venv_dir)\n    }\n\n    if (dots$with_renv) renv::init(path)\n}"
  },
  {
    "objectID": "index.html#final-product",
    "href": "index.html#final-product",
    "title": "China Pharma RUG Meeting 2023 demo2",
    "section": "2 final product",
    "text": "2 final product\n\n2.1 RStudio UI\n\n\n\n2.2 testdemo2 project"
  },
  {
    "objectID": "index.html#references",
    "href": "index.html#references",
    "title": "China Pharma RUG Meeting 2023 demo2",
    "section": "3 References",
    "text": "3 References\nhttps://r-pkgs.org/whole-game.html#use_r\nhttps://openpharma.github.io/workshop-r-swe/listing.html\nhttps://github.com/rstudio/ptexamples"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "China Pharma RUG’s goal is to provide a platform for attendees to share knowledge and explore innovative solutions with R for pharmaceutical industry. This is the first conference of its kind, and we’re excited to bring together experts and professionals from across the industry to share their experiences and insights.\nFollow China Pharma RUG:"
  }
]